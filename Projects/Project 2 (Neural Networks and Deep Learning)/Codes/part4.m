clc
clear
x=[0.5,0.7,1,1.2,1.5,1.8,1.9,2,2.,2.3,2.35,2.6,2.8,2.85,2.9,3,3.1,3.2,3.3,3.4,3.5,3.6,3.8,4,4.3,4.5,4.7,4.8,4.9,5,5.2,5.33,5.6,5.8,6,6.05,6.2,6.3,6.6,6.8,7,7.3,7.5,7.6,7.8,8.4,8.5,9.2,9.9,10.3,10.8,11,11.5,12,12.5];
y=[3.7,3.5,3.25,3,2.5,2.2,2,1.7,1.5,1.3,1.5,1.75,1.9,1.5,1.6,1.85,2.1,2.13,1.75,1.5,1.3,1.1,1,0.9,0.85,1.1,1.3,1.6,1.7,1.9,2.23,2.5,2.6,2.3,1.9,2.8,2.9,2.8,2.7,2.1,1.5,0.5,1.9,1.5,0.9,2.8,2.6,2.2,1.7,1.2,3.4,3.35,3.2,3.1,3];
z=4*ones(size(x))-y;
plot(x,z)
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 11-Feb-2022 18:50:39
%
% This script assumes these variables are defined:
%
%   x - input data.
%   z - target data.

x = x;
t = z;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
figure, ploterrhist(e)
figure, plotregression(t,y)
figure, plotfit(net,x,t)

